/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package metier;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.*;

import metier.TableWithButtonPanel.ButtonEditor;
import metier.TableWithButtonPanel.ButtonRenderer;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.*;

/**
 *
 * @author IDIR
 */
public class PanelWithButtonTable extends javax.swing.JPanel {

    /** Creates new form PanelWithButtonTable */
    public PanelWithButtonTable() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    	setLayout(new BorderLayout());

        // Create sample data for the table
        
        // Column names
        String[] columns = {"Id_Demande", "nom_project", "username", "theme", "Date", "type_demande", "Actions"};

        // Create a table model with button column
        Object[][] data = {
            };
        Vector<Object[]> demandes = fetchDemandes();
        
        DefaultTableModel model = new DefaultTableModel(data, columns) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 6; // Make only the button column editable/////////////////////////////////////////////////////-!!!!!!!!!!!!!!!!!!!!!!///
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 6) { // Assuming the "Actions" column is at index 5////////////////////////////////////!!!!!!////////////////
                    return JButton.class;
                }
                return super.getColumnClass(columnIndex);
            }
        };
        for(Object[] o : demandes) {
    	model.addRow(o);
    	}
        

        // Create a table with the model
        table = new JTable(model);

        // Set button column size
        table.getColumnModel().getColumn(6).setPreferredWidth(30);////////////////////////////////////////////////////!!!!!!!!!/////////////////

        // Add action listener to button column
        table.getColumnModel().getColumn(6).setCellRenderer(new ButtonRenderer());
        //table.getColumnModel().getColumn(5).setCellEditor(new ButtonEditor(new JCheckBox()));
        table.getColumnModel().getColumn(6).setCellEditor(new ButtonEditor());
     // Adjust column widths
        /*for (int i = 0; i < table.getColumnCount(); i++) {
            TableColumn column = table.getColumnModel().getColumn(i);
            int minWidth = getColumnMinWidth(i); // Minimum width plus additional space
            column.setMinWidth(minWidth);
            column.setWidth(minWidth);
        }*/
        setColumnWidths();        

        //call the action after clicking the button
        

        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);
        
        
        
    }
    // </editor-fold>//GEN-END:initComponents

    //////////////////////////////////////////fetchdemandes//////////////////////////////////////////////////////////
    private Vector<Object[]> fetchDemandes(){
    	Vector<Object[]> demandes = new Vector<Object[]>(); 
    	
    	try {
    		
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT IdDemande, username, nom_court_projet, theme_projet, date_demande, type FROM DEMANDE");

            
            while (rs.next()) {
            	/*String etatValue = rs.getString(6); // Assuming the enum value is stored as a string in the database
                Etat etat;
                if ("creation".equalsIgnoreCase(etatValue)) {
                    etat = Etat.CREATION;
                } else if ("ouvert".equalsIgnoreCase(etatValue)) {
                    etat = Etat.CLOSURE;
                } else {
                    // Handle unknown enum values or error cases
                    etat = null; // Or throw an exception
                }*/
                Object[] row = {
                	rs.getInt(1),
                	rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getDate(5),
                    rs.getString(6),
                };
                demandes.add(row);
            }
        } catch (Exception e) {
                        System.out.println("Exception : "+ e);
        }
        return demandes;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 // Methods to calculate the minimum width of a column--------------------------------------------
    
    private void setColumnWidths() {
        TableColumnModel columnModel = table.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            TableColumn column = columnModel.getColumn(i);
            column.setMinWidth(getPreferredColumnWidth(i) +10); // 20 pixels padding on each side
        }
    }

    private int getPreferredColumnWidth(int columnIndex) {
        int maxWidth = 0;
        TableCellRenderer renderer = table.getCellRenderer(0, columnIndex);
        for (int row = 0; row < table.getRowCount(); row++) {
            Component comp = renderer.getTableCellRendererComponent(table, table.getValueAt(row, columnIndex), false, false, row, columnIndex);
            maxWidth = Math.max(comp.getPreferredSize().width, maxWidth);
        }
        return maxWidth;
    }
 // Button renderer class
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
            setBorder(new EmptyBorder(5, 10, 5, 10)); // Add padding to the button
            
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        	setIcon(new ImageIcon(getClass().getResource("assets/view.png")));
        	setText((value == null) ? "" : value.toString());
            //setForeground(Color.BLACK);
            setBackground(Color.WHITE);
            return this;
        }
    }

    // Button editor class

    class ButtonEditor extends AbstractCellEditor implements TableCellEditor, ActionListener {
        private JButton button;
        private String label;
        private boolean isPushed;

        public ButtonEditor() {
            button = new JButton();
            button.setOpaque(true);
            button.setBorder(new EmptyBorder(5, 10, 5, 10)); // Add padding to the button
            button.addActionListener(this);
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            label = (value == null) ? "" : value.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                // Open a new JFrame when button is clicked
                JFrame frame = new JFrame("Button Clicked");
                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setSize(200, 200);
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
            isPushed = false;
            return label;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            fireEditingStopped();
        }
    }




    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFrame frame = new JFrame("Table with Button Panel");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setSize(600, 300);
                frame.setLocationRelativeTo(null);

                TableWithButtonPanel panel = new TableWithButtonPanel();
                frame.add(panel);

                frame.setVisible(true);
            }
        });
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTable table;
    Connection conn = Utilitaire.getConnection();
    // End of variables declaration//GEN-END:variables

}
